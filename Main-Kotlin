// GNU AGPLv3 licence Maxwell 2023 github
import java.io.File
import java.util.Scanner
import kotlin.random.Random

fun main() {
    val scanner = Scanner(System.`in`)
    val random = Random(System.currentTimeMillis())

    val numberLength = 190 // used for pc 
    val setsToGenerate = 1
    val generatedNumbers = mutableMapOf<String, String>()
    val fileName = "generated_numbers.txt"

    loadNumbersFromFile(fileName, generatedNumbers)

    while (true) {
        println("Press Enter to generate $setsToGenerate sets of random $numberLength-digit numbers...")
        val input = scanner.nextLine().trim()

        when {
            input.startsWith(".set ") -> {
                val parts = input.split(" ", limit = 3)
                if (parts.size == 3) {
                    val randomString = parts[1]
                    val value = parts[2]
                    generatedNumbers[randomString] = value
                    println("Associated value set for '$randomString': $value")
                    saveNumbersToFile(fileName, generatedNumbers)
                } else {
                    println("Invalid input format. Usage: .set <random_string> <value>")
                }
            }
            input.startsWith(".find ") -> {
                val targetNumber = input.substring(6)
                val associatedValue = generatedNumbers[targetNumber]
                if (associatedValue != null) {
                    println("Associated value for '$targetNumber': $associatedValue")
                } else {
                    println("No associated value found for '$targetNumber'")
                }
            }
            input.startsWith(".delete ") -> {
                val targetNumber = input.substring(8)
                if (generatedNumbers.containsKey(targetNumber)) {
                    generatedNumbers.remove(targetNumber)
                    println("Associated value for '$targetNumber' deleted.")
                    saveNumbersToFile(fileName, generatedNumbers)
                } else {
                    println("No associated value found for '$targetNumber'")
                }
            }
            input.startsWith(".list ") -> {
                val searchPattern = input.substring(6).trim()
                val matchingEntries = generatedNumbers.entries.filter { (randomString, _) ->
                    randomString.contains(searchPattern)
                }
                if (matchingEntries.isNotEmpty()) {
                    println("Matching entries for '$searchPattern':")
                    matchingEntries.forEach { (randomString, value) ->
                        println("$randomString -> $value")
                    }
                } else {
                    println("No matching entries found for '$searchPattern'")
                }
            }
            else -> {
                for (i in 1..setsToGenerate) {
                    var randomNumber = generateRandomNumber(random, numberLength)
                    if (randomNumber in generatedNumbers.keys) {
                        randomNumber += " <dupe>"
                    }
                    println("Generated random number $i: $randomNumber")
                }
            }
        }
    }
}

fun generateRandomNumber(random: Random, numberLength: Int): String {
    val maxDigitValue = 9
    val stringBuilder = StringBuilder(numberLength)

    for (i in 1..numberLength) {
        if (random.nextInt(10) == 0) {
            val randomChar = if (random.nextBoolean()) {
                ('A'..'Z').random()
            } else {
                ('a'..'z').random()
            }
            stringBuilder.append(randomChar)
        } else {
            val digit = random.nextInt(maxDigitValue + 1)
            stringBuilder.append(digit)
        }
    }

    return stringBuilder.toString()
}

fun loadNumbersFromFile(fileName: String, map: MutableMap<String, String>) {
    val file = File(fileName)
    if (file.exists()) {
        file.readLines().forEach { line ->
            val parts = line.split(" ", limit = 2)
            if (parts.size == 2) {
                val randomString = parts[0]
                val value = parts[1]
                map[randomString] = value
            }
        }
    }
}

fun saveNumbersToFile(fileName: String, map: Map<String, String>) {
    val file = File(fileName)
    val lines = map.entries.joinToString("\n") { (randomString, value) ->
        "$randomString $value"
    }
    file.writeText(lines)
}
